function forest( sketch ) {

//////////////////////////////////////

var w = 600;
var h = 600;
var div = 8 ;
var sz = 4;
var disp_w = 300;
var range = 250;
var consumer;
var cell_Count =((div)*(div));
var cells = [cell_Count];

var pause;


var trees = []; // array of Tree objects
var millisec;

sketch.setup= function() {
  sketch.print("strting...")
  sketch.createCanvas(w, h);
  millisec = sketch.millis();
  // Create objects
  //for (var i=0; i<50; i++) {
  //  bugs.push(new Tree());
  //}
  var loc = 0
  for (var x = 1 ; x <= div; x+=1){

    for (var y = 1; y<= div; y+=1){
      //sketch.print("index"+String(loc), "wtf")
      trees[loc] = (new Tree(( ((w/div)*x)-40), (y*(h/div))-40, sketch.random(40,20), sketch.random(8,12), sketch.random(w,h)));////x,y,startsize , number of steps, length
      trees[loc].populate();
      loc+=1;
      //trees.push(new Tree(x, y, sketch.random(40,20), sketch.random(8,12), sketch.random(w,h)));////x,y,startsize , number of steps, length
      //trees[trees.length-1].populate();
    }
  }
  sketch.print("trees populated  cc="+String(cell_Count)+"   l="+String(trees.length));

  pause = new Game_Menu();
  sketch.frameRate(5);
  sketch.createCanvas(w, h);
  sketch.colorMode(sketch.HSB);
  //noStroke();
  consumer = new Settler(250, sketch.mouseX, sketch.mouseY);


}

sketch.draw = function() {

  if (pause.pause == false){
    sketch.colorMode(sketch.RGB);
    sketch.background(0,0,0,50);
    sketch.colorMode(sketch.HSB);
    consumer.display();
    for (var i = 0; i<trees.length; i++){

    trees[i].occ_test(consumer.r_sz);}

    for (var i = 0; i<trees.length; i++){
    trees[i].display();
  }

  }
  pause.menu();

}

// Treeclass
function Tree(x, y, s, num, len) { ///x,y,startsize , number of steps, length
  this.Start_x = x;
  this.Start_y = y;
  this.diameter = sketch.random(8, 9);
  this.Start_sz = s;
  this.num = num; // this is how many circles
  this.T_sz = len; // this is how big the start size is
  this.xlocs = [this.num];
  this.ylocs = [this.num];
  this.sizes = [this.num];
  this.displayRange = this.num;
  //this.sml_rate =
  this.scaler = (this.T_sz/this.num)  // this is the scale factor
  this.last_x;
  this.last_y;
  this.last_sz;
///////////////////

this.reduce = function(){
  this.xlocs.pop();
  this.ylocs.pop();
  this.sizes.pop();
}

////////////////////////////////////////
this.occ_test = function(range) {

  if (sketch.dist(this.Start_x,this.Start_y,sketch.mouseX,sketch.mouseY)<range) {
    if (this.sizes.length > 2){
      this.displayRange -=1;

    }
  }
  else{
    if(this.displayRange < this.num-1 ){
      this.displayRange +=1;

  }
}
}
///////////////////////////////////////

this.populate = function() {
  var last_x = [this.Start_x,this.Start_x,this.Start_x,this.Start_x];
  var last_y = [this.Start_y,this.Start_y,this.Start_y,this.Start_y];
  var last_sz = this.Start_sz;
  //var new_dist = start_dist;
  for (var i = 1; i< this.num; i++) {

      this.xlocs[i] = [last_x[0] +sketch.random(0,last_sz*.3), last_x[1] -sketch.random(0,last_sz*.3), last_x[2] +sketch.random(0,last_sz*.3),last_x[3] -sketch.random(0,last_sz*.3)];
      this.ylocs[i] = [last_y[0] +sketch.random(0,last_sz*.3), last_y[2] -sketch.random(0,last_sz*.3), last_y[2] -sketch.random(0,last_sz*.3),last_y[3] +sketch.random(0,last_sz*.3)];
      //this.sizes[i] = [];


      //this.xlocs[i] = last_x += random(0,last_sz*.3);
      //this.ylocs[i] = last_y += random(-last_sz*.3,last_sz*.3);
      this.sizes[i] = last_sz * 0.9;/// rate of decrease
      last_x = this.xlocs[i];
      last_y = this.ylocs[i];
      last_sz= this.sizes[i];
      //ellipse(this.xlocs[i], this.ylocs[i],this.sizes[i],this.sizes[i]);
    //  translate(last_x*new_dist, last_y*new_dist)
    //  rotate(radians(random(-5,5)))
      ////////Imaging a move vector rotate situation/////

      ///////////////////////////////////////////////////
    }

  }
this.display = function() {
  for (var i = 2 ; i< this.displayRange; i++){
    var degree = sketch.map(i,0,this.num,15,70);
    var col = [sketch.color(100,52,degree),sketch.color(133,52,degree),sketch.color(166,52,degree),sketch.color(200,52,degree)];
    for (var j = 0; j<4; j++){
      //print(j, this.xlocs[i][j]);
      sketch.fill(col[j]);
      sketch.ellipse(this.xlocs[i][j], this.ylocs[i][j],this.sizes[i],this.sizes[i]);
    }

  }
}

}


}
